#ifdef __cplusplus
extern "C" {
#endif
int _isatty (){
  return 0;
}
int _fstat (){
  return 1;
}
#ifdef __cplusplus
}
#endif
#include "malloc.h"

#include <FastLED.h>
#include "Graph.hpp"
#include "rgb2hsv.hpp"

// IO/Hardware config
//--------------------------------------------------
#define RIGHT_GREEN 2
#define RIGHT_YELLOW 7
#define RIGHT_PINK 8
#define RIGHT_BLUE 14
#define LEFT_GREEN 5
#define LEFT_YELLOW 6
#define LEFT_PINK 20
#define LEFT_BLUE 21

#define RG_INDEX 0
#define RY_INDEX 172
#define RP_INDEX 352
#define RB_INDEX 510
#define LB_INDEX 755
#define LP_INDEX 1029
#define LY_INDEX 1193
#define LG_INDEX 1372+2
#define MAX_LED_NUM 1548+2

#define LED_PIN 13

#define NUM_SENSORS 5

#define LED_TYPE UCS1903
#define BRIGHTNESS 255
//--------------------------------------------------

// Crystals/LEDs config
//--------------------------------------------------
#define NUM_CRYSTALS 291
//--------------------------------------------------

// ====================
// Hardware info store
CRGB leds[MAX_LED_NUM];
// The updated rgb value that the wall fades towards
CRGB target[MAX_LED_NUM];
uint16_t firstLED[291] = {0,5,10,13,16,21,27,33,40,45,48,54,58,67,71,75,79,85,88,94,100,107,111,115,122,129,133,138,144,152,158,165,172,176,182,186,190,194,198,202,206,211,215,219,223,228,236,245,250,254,260,263,267,271,275,282,287,292,298,304,307,313,318,325,333,338,345,352,356,362,367,372,377,383,389,392,395,398,402,407,414,420,429,432,434,439,447,451,455,459,462,465,469,473,482,488,491,495,504,510,515,521,529,533,536,542,550,555,562,566,572,578,585,590,595,602,607,610,615,622,630,633,637,641,647,654,658,666,675,681,688,692,696,699,706,713,716,724,730,734,740,743,746,752,755,761,765,776,786,796,807,810,816,824,829,836,840,846,852,859,864,869,876,881,884,889,896,904,907,911,915,921,928,932,940,949,955,962,966,970,973,980,987,990,998,1004,1008,1014,1017,1020,1026,1029,1033,1038,1043,1048,1054,1060,1063,1069,1075,1078,1081,1085,1090,1097,1103,1112,1115,1117,1122,1130,1134,1138,1142,1145,1148,1152,1156,1165,1171,1174,1178,1187,1193,1197,1202,1206,1210,1215,1219,1223,1227,1231,1235,1239,1243,1248,1256,1265,1270,1274,1280,1283,1288,1292,1296,1303,1309,1314,1320,1326,1329,1335,1340,1347,1355,1360,1367,1374,1383,1388,1391,1394,1399,1405,1411,1418,1423,1426,1432,1436,1445,1449,1453,1457,1463,1466,1472,1478,1485,1489,1493,1500,1507,1511,1516,1522,1530,1536,1543};
uint16_t lastLED[291] = {4,9,12,15,20,26,32,39,44,47,53,57,66,70,74,78,84,87,93,99,106,110,114,121,128,132,137,143,151,157,164,171,175,181,185,189,193,197,201,205,210,214,218,222,227,235,244,249,253,259,262,266,270,274,281,286,291,297,303,306,312,317,324,332,337,344,351,355,361,366,371,376,382,388,391,394,397,401,406,413,419,428,431,433,438,446,450,454,458,461,464,468,472,481,487,490,494,503,509,514,520,528,532,535,541,549,554,561,565,571,577,584,589,594,601,606,609,614,621,629,632,636,640,646,653,657,665,674,680,687,691,695,698,705,712,715,723,729,733,739,742,745,751,754,760,764,775,785,795,806,809,815,823,828,835,839,845,851,858,863,868,875,880,883,888,895,903,906,910,914,920,927,931,939,948,954,961,965,969,972,979,986,989,997,1003,1007,1013,1016,1019,1025,1028,1032,1037,1042,1047,1053,1059,1062,1068,1074,1077,1080,1084,1089,1096,1102,1111,1114,1116,1121,1129,1133,1137,1141,1144,1147,1151,1155,1164,1170,1173,1177,1186,1192,1196,1201,1205,1209,1214,1218,1222,1226,1230,1234,1238,1242,1247,1255,1264,1269,1273,1279,1282,1287,1291,1295,1302,1308,1313,1319,1325,1328,1334,1339,1346,1354,1359,1366,1373,1382,1387,1390,1393,1398,1404,1410,1417,1422,1425,1431,1435,1444,1448,1452,1456,1462,1465,1471,1477,1484,1488,1492,1499,1506,1510,1515,1521,1529,1535,1542,1549};

// ====================
// Wing variables
bool *prevWing = NULL;
bool *currWing = NULL;
//bool wingOn = true; currently not used

#define WING_1_SIZE 109
#define WING_2_SIZE 82
#define WING_3_SIZE 83
#define WING_4_SIZE 89
#define WING_5_SIZE 88

bool wing1[291] = {0,0,0,1,1,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
bool wing2[291] = {0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
bool wing3[291] = {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,1,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,1,1,1,0,1,1,1,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
bool wing4[291] = {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,0,0,1,1,1,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
bool wing5[291] = {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,0,0,0,0,0,0,0,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,1,0,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,0,0,0,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

// ====================
// Graph variables
Graph * g;
int *dist = NULL;

// ====================
// Time variables
uint8_t t = 0;

// ====================
// HSV variables 
// NOTE: uint8_t allows you to have a range 0-255 without having to mod any values (via 8-bit overflow)
uint8_t global_hue = 0;
uint8_t hueDelta = 1;

// ====================
// sensor variables
uint8_t sensorPins[NUM_SENSORS] = {17, 18, 19, 22, 23};

// ====================
// Pattern global variables
int oldCentre = -1;
std::vector <int> dynRndArray;
int dynRndTime = 5;
int temp = 0;
uint8_t maxDistance = 1;

// ====================
// Main loop global variables
boolean transition = true;
int choosePattern = 1;

// ====================
// Fade variables
double fadeSpeed = 1;
// the initial rate of fade
#define FADE_AMOUNT 2
// the rate at which fade changes
#define FADE_DELTA 0.02

// ====================
// Radial variables
uint8_t radialIndex = 0;

// ====================
// Serial input
bool input = false;
int Command = 0;

// ============ SETUP ============ SETUP ============ SETUP ============ SETUP ============ SETUP ============
void setup() {
  srand(0);
  Serial.begin(9600);
  FastLED.addLeds<LED_TYPE, RIGHT_GREEN, RGB>(leds, RG_INDEX, 172);
  FastLED.addLeds<LED_TYPE, RIGHT_YELLOW, RGB>(leds, RY_INDEX, 180);
  FastLED.addLeds<LED_TYPE, RIGHT_PINK, RGB> (leds, RP_INDEX, 158);
  FastLED.addLeds<LED_TYPE, RIGHT_BLUE, RGB> (leds, RB_INDEX, 245);
  FastLED.addLeds<LED_TYPE, LEFT_BLUE, RGB> (leds, LB_INDEX, 274);
  FastLED.addLeds<LED_TYPE, LEFT_PINK, RGB> (leds, LP_INDEX, 164);
  FastLED.addLeds<LED_TYPE, LEFT_YELLOW, RGB> (leds, LY_INDEX, 179+2);
  FastLED.addLeds<LED_TYPE, LEFT_GREEN, RGB> (leds, LG_INDEX, 176);
  g = new Graph();
  dist = g->calcDist(259);
  maxDistance = g->maxDist(dist);
  for (int i = 0; i < NUM_SENSORS; i++) {
    pinMode(sensorPins[i], INPUT);
  }
}

void loop() {
  
// Measures execution time
//--------------------------------
  unsigned long duration = micros();
  float total = 0;
//--------------------------------
//================================================= PATTERN CODE GOES HERE ================================================= 

  // Note sensors are active low
  if(!digitalRead(sensorPins[4]) && !digitalRead(sensorPins[3]) && !digitalRead(sensorPins[2]) && !digitalRead(sensorPins[1]) && !digitalRead(sensorPins[0])) {
    currWing = wing5;
  } else if(!digitalRead(sensorPins[3]) && !digitalRead(sensorPins[2]) && !digitalRead(sensorPins[1]) && !digitalRead(sensorPins[0])) {
    currWing = wing4;
  } else if(!digitalRead(sensorPins[2]) && !digitalRead(sensorPins[1]) && !digitalRead(sensorPins[0])) {
    currWing = wing3;
  } else if(!digitalRead(sensorPins[1]) && !digitalRead(sensorPins[0])) {
    currWing = wing2;
  } else if(!digitalRead(sensorPins[0])) {
    currWing = wing1;
  }
  //  } else {
//    currWing = NULL;
//    // wingOn = false; currently not used
//  }

  while (Serial.available()) {
    // get the new byte:
    char inChar = (char)Serial.read();
    if (inChar == '\n') {
      input = true;
    } else {
      Command = inChar - '0';
    }
  }
  
  if(input == true) {
    if(Command == 0) {
      currWing = NULL;
    } else if(Command == 1) {
      currWing = wing1;
    } else if(Command == 2) {
      currWing = wing2;
    } else if(Command == 3) {
      currWing = wing3;
    } else if(Command == 4) {
      currWing = wing4;
    } else if(Command == 5) {
      currWing = wing5;
    }
    input = false;
  }

  // Changes the pattern after 25 seconds when the scene changes
  if(t == 0)
    temp = rand();
  
  bool change = false;
  // Catches when there is a change in scene
  if(prevWing != currWing) {
    prevWing = currWing;
    fadeSpeed = FADE_AMOUNT;
    radialIndex = 0;
    choosePattern = temp;
    change = true;
  }
  
  // Updating the fade speed with each loop
  if(fadeSpeed > 1 + FADE_DELTA) fadeSpeed -= FADE_DELTA;
  
  // Choosing pattern
  if(currWing == NULL) {
    switch (2){//choosePattern % 3) {
      case 0 :
        shimmerCenter(currWing, 259);
        break;
      case 1 :
        randomWall();
        break;
      case 2 :
        if(fadeSpeed < 1 + 0.1) fadeSpeed = 0.98;
        shimmerCenter(currWing, 259);
        break;
      case 3 :
        crystalGradient();
        break;
      case 4 :
        randomDynamic(); // doesn't work
        break;
      default:
        Serial.println("default backgrond");
        shimmerCenter(currWing, 259);
    }
  } else {
    switch (choosePattern % 6) {
      case 0 :
        shimmerCenter(currWing, 259);
        break;
      case 1 :
        if(fadeSpeed < 1 + 0.1) fadeSpeed = 0.98;
        shimmerCenter(currWing, 259);
        break;
      case 2 :
        colorToWhite(currWing, 259, change);
        break;
      case 3 :
        colorToBlack(currWing, 259, change);
        break;  
      case 4 :
        solid(currWing, 259, change);
        break;
      case 5 :
        chrisWings();
        break;
      default:
        shimmerCenter(currWing, 259);
    }
    // Ambient background lighting
//    for(int i = 0; i < NUM_CRYSTALS; i++) {
//      if(!currWing[i])
//        crystalHSV(i, 1,  0, 100); 
//    }
  }

  // Actually updates wall
  // Updating method
  if(transition) {
    switch (choosePattern % 2) {
      case 0 :
        fadeTo();
        break;
      case 1 :
        radialTo(259);
        break;
      default:
        jumpTo(); 
    }
  } else {
    transition = true;
  }
  
//      case 3 :            adding clays proposal plans
        clayPattern();
//        break;
//=================================================//=================================================//=================================================
  // t is global timer of range 0-255, don't change at all only use, create your own timer if needed
  t++;
  FastLED.show();
// Measures execution time
//--------------------------------
  duration = micros() - duration;
  total += duration;
  Serial.print("\nTime per loop: ");
  Serial.print(total);
  Serial.println(" microseconds");
  Serial.print("FPS: ");
  Serial.println(1000000/(float)total);
//--------------------------------

// Measures RAM usage
//--------------------------------
  int ramUsage = 196608 - freeRAM() + mallinfo().uordblks;
  Serial.print("Ram usage: ");
  Serial.print((float)ramUsage/196608 * 100);
  Serial.print("% | ");
  Serial.print(ramUsage);
  Serial.println("/196608 bytes");
//--------------------------------
  
// Reads and prints sensor output 
//--------------------------------
  Serial.print("Sensor values: ");
  for (int i = 0; i < NUM_SENSORS; i++) {
    Serial.print(digitalRead(sensorPins[i]));
  }
  Serial.println();
//--------------------------------
}

// ============ TRANSITION PATTERNS ============ TRANSITION PATTERNS ============ TRANSITION PATTERNS ============ TRANSITION PATTERNS ============ TRANSITION PATTERNS ============
// Transitions the current wall to target using a radiation;
void radialTo(int centre) {
  
  changeCentre(centre);
  
  double radialDistance = 0;
  int red, green, blue, led;
  
  for(int index = 0; index < NUM_CRYSTALS; index++) {
    radialDistance = dist[index] - (radialIndex % maxDistance  + 1);
    if(radialDistance < 1) radialDistance = 1;
    led = firstLED[index]+1;
    red = leds[led].red + ((target[index].r - leds[led].r) / radialDistance);
    green = leds[led].green + ((target[index].g - leds[led].g) / radialDistance);
    blue = leds[led].blue + ((target[index].b - leds[led].b) / radialDistance);
    
    for(int i = firstLED[index]; i <= lastLED[index]; i++) {
      leds[i] = CRGB(red, blue, green);
    }
  }
  radialIndex++;
}

//  Transitions the current wall to the target wall slowly
void fadeTo() {
  int red, green, blue, led;
  for(int index = 0; index < NUM_CRYSTALS; index++) {
    led = firstLED[index]+1;
    red = leds[led].red + ((target[index].r - leds[led].r) / fadeSpeed);
    green = leds[led].green + ((target[index].g - leds[led].g) / fadeSpeed);
    blue = leds[led].blue + ((target[index].b - leds[led].b) / fadeSpeed);
    for(int i = firstLED[index]; i <= lastLED[index]; i++) {
      leds[i] = CRGB(red, blue, green);
    }
  }
}

// Instantly changes the wall to target 
void jumpTo() {
  for(int index = 0; index <= NUM_CRYSTALS; index++) {
    for(int i = firstLED[index]; i <= lastLED[index]; i++) {
      leds[i] = CRGB(target[index].r, target[index].b, target[index].g);
    }
  }
}

// ============ WING PATTERNS ============ WING PATTERNS ============ WING PATTERNS ============ WING PATTERNS ============ WING PATTERNS ============

// Chris's wing pattern
void chrisWings() {
  int chris[291*3] = {110,65,0,0,67,171,0,0,0,0,0,0,0,149,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,110,65,0,86,0,163,1,2,144,0,39,157,0,0,0,0,10,146,20,0,145,116,0,173,69,0,157,50,0,151,0,14,148,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,174,250,0,198,168,0,190,242,0,198,0,0,149,0,0,118,0,0,23,0,30,0,0,77,0,0,35,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,110,65,0,110,65,0,0,0,198,0,0,43,110,65,0,0,0,0,0,0,0,110,65,0,110,65,0,0,76,0,0,167,0,0,232,0,193,251,9,0,250,0,164,241,13,68,202,29,1,180,57,0,0,0,0,0,0,0,246,0,0,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,110,65,0,110,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,110,65,0,0,0,0,110,65,0,110,65,0,0,189,94,0,219,166,0,0,240,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,110,65,0,110,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,110,65,0,0,0,0,110,65,0,110,65,0,0,184,80,0,211,148,0,251,230,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,110,65,0,110,65,0,110,65,0,248,0,198,0,0,58,110,65,0,0,0,0,0,0,0,110,65,0,110,65,0,0,62,0,0,151,0,0,223,0,211,252,6,0,243,0,186,249,10,89,210,25,12,181,49,0,0,0,0,0,0,0,237,0,0,152,0,0,0,0,0,0,0,0,0,0,0,0,0,110,65,0,0,4,144,79,0,160,104,0,168,12,0,144,0,47,162,0,0,0,0,18,149,55,0,153,36,0,148,0,26,152,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,188,233,0,198,144,0,181,228,0,198,0,0,164,0,0,139,0,0,37,0,19,0,0,59,0,0,21,0,0,0,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,110,65,0,0,71,172,0,0,0,0,0,0,0,165,220,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
  for(int i = 0; i < 291*3; i++) {
      crystalRGB(i/3, chris[i++], chris[i++], chris[i]);
  }
  temp = rand();
}

// Chris's wing pattern
void clayPattern() {
  //int clay[(MAX_LED_NUM) * 3] = {};
//  int clay[(MAX_LED_NUM) * 3] = {};
  int clay[(MAX_LED_NUM) * 3] = {255,253,213,255,248,138,255,255,255,255,244,82,255,240,0,255,255,255,255,248,125,255,248,125,255,247,119,255,240,0,255,247,111,255,255,255,255,240,0,255,252,215,255,240,4,255,254,229,255,250,175,255,255,255,255,244,63,255,240,0,255,249,146,255,255,255,255,249,165,255,246,89,255,243,37,255,240,0,255,246,103,255,244,76,255,240,0,255,245,79,255,251,190,255,255,255,255,246,100,255,255,255,255,255,255,255,253,215,255,243,52,255,241,9,255,247,107,255,240,0,255,240,0,255,243,61,255,255,255,255,249,165,255,244,68,255,255,255,255,240,0,255,240,0,255,240,0,255,247,124,255,252,209,255,255,255,255,255,255,255,254,243,255,240,5,255,247,131,255,255,255,255,249,146,255,255,255,255,254,241,255,249,155,255,244,74,255,240,7,255,247,123,255,250,160,255,253,228,255,254,228,255,255,255,255,255,255,255,253,213,255,241,25,255,244,69,255,255,255,255,248,125,255,240,0,255,245,86,255,240,7,255,252,194,255,255,255,255,255,255,255,249,149,255,240,0,255,240,0,255,246,107,255,240,0,255,251,187,255,255,255,255,240,0,255,252,196,255,243,65,255,240,0,255,242,40,255,251,188,255,255,255,255,248,139,255,243,43,255,240,0,255,242,43,255,251,194,255,255,255,255,240,0,255,244,60,255,248,147,255,249,152,255,253,222,255,253,234,255,255,255,255,252,206,255,240,0,255,252,205,255,255,255,255,249,159,255,255,255,255,246,100,255,241,16,255,252,210,255,250,175,255,255,255,255,250,178,255,243,53,255,242,29,255,242,38,255,253,228,255,255,255,255,255,255,255,253,218,255,246,113,255,244,66,255,240,0,255,240,0,255,241,17,255,241,20,255,254,240,255,255,255,255,248,140,255,255,255,255,240,0,255,242,31,255,254,232,255,244,66,255,244,65,255,240,0,255,249,140,255,251,171,255,249,142,255,240,1,255,240,0,255,240,0,255,241,10,255,248,134,255,248,136,255,255,255,255,255,255,255,255,255,255,255,244,255,240,0,255,244,80,255,244,80,255,255,255,255,251,191,255,244,76,255,247,119,255,240,0,255,251,197,255,255,255,255,255,248,255,248,142,255,248,135,255,241,18,255,242,33,255,240,0,255,240,0,255,240,0,255,246,100,255,247,126,255,255,255,255,254,227,255,240,14,255,243,62,255,254,242,255,254,243,255,244,67,255,255,255,255,251,189,255,241,11,255,251,187,255,254,242,255,248,123,255,247,124,255,241,15,255,255,255,255,251,190,255,248,132,255,240,0,255,255,255,255,253,221,255,240,0,255,251,183,255,241,20,255,250,161,255,252,199,255,255,255,255,242,28,255,246,100,255,249,149,255,254,238,255,241,1,255,245,85,255,250,167,255,255,255,255,249,146,255,254,242,255,247,122,255,242,27,255,250,160,255,255,255,255,249,152,255,248,136,255,241,11,255,255,255,255,247,115,255,248,141,255,240,0,255,250,166,255,255,255,255,246,101,255,240,0,255,242,39,255,255,255,255,253,227,255,250,163,255,245,82,255,240,0,255,243,43,255,247,123,255,253,218,255,244,67,255,240,0,255,242,33,255,248,134,255,255,255,255,250,176,255,252,217,255,255,255,255,255,255,255,249,138,255,240,0,255,249,140,255,251,193,255,255,255,255,250,172,255,255,255,255,248,139,255,240,0,255,254,243,255,255,255,255,251,183,255,247,118,255,240,0,255,242,29,255,241,15,255,249,140,255,255,255,255,241,16,255,246,105,255,255,255,255,250,177,255,243,53,255,240,0,255,251,186,255,255,255,255,240,0,255,248,138,255,252,199,255,255,255,255,255,255,255,253,215,255,251,183,255,247,111,255,249,151,255,244,66,255,241,10,255,250,170,255,240,6,255,246,101,255,250,172,255,255,255,255,247,119,255,241,33,255,249,147,255,253,221,255,255,255,255,255,255,255,250,183,255,249,156,255,244,79,255,246,101,255,241,11,255,255,255,255,255,255,255,246,110,255,240,0,255,243,47,255,254,243,255,255,255,255,240,0,255,248,133,255,240,7,255,245,82,255,251,187,255,255,254,255,250,170,255,245,81,255,255,255,255,250,169,255,252,192,255,245,87,255,240,0,255,253,218,255,255,255,255,253,210,255,247,109,255,241,22,255,248,140,255,246,107,255,254,229,255,248,144,255,246,101,255,240,12,255,245,81,255,249,149,255,253,217,255,255,255,255,248,140,255,248,147,255,255,255,255,250,167,255,240,0,255,252,198,255,255,255,255,253,217,255,245,83,255,245,93,255,240,2,255,240,0,255,242,37,255,249,148,255,255,255,255,250,178,255,249,151,255,240,0,255,241,16,255,240,0,255,245,92,255,255,255,255,245,94,255,249,154,255,240,0,255,242,22,255,254,238,255,248,131,255,255,255,255,247,122,255,254,240,255,242,35,255,240,0,255,248,127,255,248,134,255,255,255,255,255,255,255,244,69,255,255,255,255,249,160,255,255,246,255,242,41,255,244,62,255,240,0,255,241,3,255,240,0,255,247,126,255,248,142,255,255,255,255,255,255,255,251,188,255,251,190,255,251,184,255,245,89,255,244,54,255,240,0,255,240,8,255,255,255,255,255,255,255,252,206,255,240,3,255,240,0,255,252,214,255,240,0,255,255,255,255,252,198,255,241,20,255,252,202,255,255,255,255,253,231,255,240,9,255,249,149,255,255,255,255,255,255,255,240,0,255,241,26,255,248,142,255,246,100,255,253,223,255,253,224,255,255,255,255,249,148,255,244,70,255,240,6,255,255,255,255,255,244,255,255,255,255,255,255,255,255,255,255,248,138,255,242,34,255,252,212,255,255,255,255,255,255,255,249,160,255,241,16,255,240,0,255,251,176,255,255,255,255,255,255,255,243,46,255,255,255,255,250,176,255,240,0,255,248,136,255,255,255,255,255,255,255,255,255,255,247,120,255,246,102,255,240,0,255,246,103,255,245,80,255,254,251,255,255,255,255,255,255,255,242,47,255,240,0,255,255,255,255,240,0,255,254,234,255,255,255,255,250,167,255,255,255,255,252,207,255,241,26,255,251,184,255,241,17,255,254,236,255,255,245,255,252,204,255,243,52,255,255,255,255,246,100,255,243,56,255,240,0,255,245,81,255,249,146,255,242,28,255,255,255,255,247,114,255,242,24,255,240,0,255,244,63,255,251,198,255,255,255,255,250,159,255,254,232,255,255,255,255,246,113,255,240,0,255,244,70,255,248,132,255,251,196,255,255,255,255,253,222,255,255,255,255,241,15,255,255,255,255,249,159,255,245,86,255,240,0,255,255,255,255,254,249,255,250,164,255,255,255,255,250,169,255,242,46,255,240,0,255,243,53,255,250,175,255,255,255,255,250,175,255,240,0,255,240,0,255,254,248,255,243,63,255,255,247,255,246,96,255,245,88,255,254,237,255,255,255,255,240,0,255,252,195,255,241,28,255,255,255,255,243,55,255,255,255,255,242,31,255,240,0,255,241,16,255,244,68,255,250,156,255,255,250,255,250,173,255,246,110,255,240,0,255,244,77,255,253,223,255,244,67,255,248,134,255,255,255,255,240,0,255,240,6,255,248,148,255,242,44,255,246,99,255,251,191,255,254,251,255,246,106,255,255,255,255,255,255,255,255,253,255,250,179,255,240,6,255,240,0,255,241,24,255,255,255,255,249,160,255,245,85,255,242,33,255,240,0,255,255,255,255,253,216,255,246,93,255,240,0,255,247,121,255,255,242,255,255,255,255,255,255,255,250,173,255,240,0,255,241,13,255,240,0,255,252,212,255,255,255,255,255,255,255,248,149,255,253,217,255,249,144,255,242,41,255,241,3,255,245,91,255,251,182,255,255,243,255,246,94,255,240,3,255,250,182,255,255,254,255,248,144,255,241,17,255,244,54,255,255,255,255,252,200,255,251,195,255,247,114,255,244,71,255,248,133,255,240,0,255,246,95,255,253,218,255,243,58,255,254,234,255,246,114,255,242,36,255,240,0,255,247,124,255,240,0,255,240,7,255,247,118,255,240,0,255,240,1,255,250,178,255,255,255,255,242,31,255,251,180,255,242,31,255,240,0,255,250,178,255,255,255,255,255,255,255,247,125,255,255,255,255,251,194,255,244,74,255,241,8,255,244,78,255,250,166,255,253,231,255,255,255,255,255,255,255,252,206,255,245,88,255,240,0,255,241,3,255,241,28,255,251,187,255,252,211,255,244,63,255,240,0,255,247,112,255,255,255,255,246,109,255,240,0,255,253,213,255,255,255,255,241,15,255,240,0,255,240,0,255,247,128,255,246,106,255,254,245,255,254,238,255,255,249,255,255,255,255,253,216,255,242,41,255,246,106,255,242,37,255,254,224,255,255,255,255,250,165,255,254,229,255,241,6,255,255,255,255,240,2,255,245,70,255,241,18,255,251,182,255,255,255,255,251,190,255,244,74,255,253,211,255,242,41,255,241,7,255,245,75,255,248,139,255,247,122,255,254,226,255,251,196,255,255,255,255,255,255,255,254,236,255,247,116,255,244,69,255,240,0,255,240,0,255,240,4,255,252,203,255,250,179,255,242,39,255,244,73,255,255,249,255,250,184,255,244,83,255,248,135,255,240,0,255,250,161,255,255,255,255,255,255,255,242,43,255,247,108,255,240,0,255,249,156,255,254,232,255,242,34,255,245,92,255,241,28,255,253,218,255,247,107,255,249,163,255,254,247,255,255,255,255,250,170,255,254,236,255,255,255,255,253,221,255,247,126,255,247,120,255,241,15,255,241,22,255,252,209,255,240,0,255,253,223,255,255,255,255,245,80,255,240,0,255,250,177,255,255,255,255,255,255,255,247,129,255,243,61,255,243,51,255,242,41,255,255,255,255,253,232,255,252,200,255,243,49,255,255,255,255,242,37,255,255,255,255,250,173,255,255,255,255,255,255,255,250,162,255,240,0,255,241,31,255,248,145,255,255,255,255,240,0,255,254,239,255,255,255,255,242,42,255,242,30,255,240,0,255,243,50,255,251,192,255,255,255,255,252,204,255,240,0,255,255,255,255,255,253,255,240,0,255,252,195,255,241,28,255,243,54,255,255,255,255,255,255,255,240,0,255,244,75,255,244,64,255,253,223,255,243,65,255,241,21,255,248,146,255,251,184,255,245,85,255,240,0,255,242,35,255,243,47,255,247,125,255,252,205,255,255,255,255,254,244,255,249,152,255,243,47,255,240,0,255,243,57,255,251,187,255,254,227,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,253,225,255,251,186,255,243,57,255,240,0,255,243,46,255,249,152,255,255,244,255,255,255,255,252,205,255,251,184,255,245,85,255,249,145,255,243,65,255,241,21,255,240,0,255,242,35,255,247,123,255,243,47,255,255,255,255,248,134,255,240,0,255,240,6,255,248,147,255,243,44,255,245,97,255,251,189,255,254,251,255,246,106,255,255,255,255,255,255,255,255,253,255,250,179,255,240,6,255,240,0,255,242,22,255,255,255,255,249,157,255,245,82,255,242,33,255,240,0,255,255,255,255,252,213,255,245,89,255,240,0,255,247,119,255,255,242,255,255,255,255,255,255,255,250,170,255,240,0,255,241,13,255,240,0,255,252,212,255,255,255,255,255,255,255,248,149,255,253,215,255,249,144,255,242,39,255,240,1,255,246,90,255,251,182,255,254,243,255,246,94,255,240,3,255,251,179,255,255,254,255,249,142,255,241,15,255,243,53,255,255,255,255,252,200,255,251,195,255,247,108,255,244,71,255,247,131,255,240,0,255,246,95,255,253,218,255,243,58,255,254,234,255,246,114,255,242,36,255,240,0,255,248,123,255,240,0,255,240,7,255,247,118,255,240,0,255,240,0,255,250,178,255,255,255,255,242,31,255,251,180,255,241,30,255,240,0,255,250,174,255,255,255,255,255,255,255,247,121,255,255,255,255,251,193,255,244,72,255,241,8,255,244,78,255,250,162,255,253,230,255,255,255,255,255,255,255,252,204,255,245,88,255,240,0,255,241,3,255,241,25,255,251,184,255,252,211,255,243,63,255,240,0,255,247,114,255,255,255,255,246,111,255,240,0,255,253,213,255,255,255,255,240,16,255,240,0,255,240,0,255,248,125,255,246,106,255,255,244,255,254,238,255,255,248,255,255,255,255,253,215,255,242,40,255,246,102,255,242,34,255,253,223,255,255,255,255,250,160,255,253,223,255,241,6,255,255,255,255,240,2,255,244,67,255,241,17,255,250,180,255,255,255,255,251,188,255,244,73,255,253,211,255,242,40,255,241,7,255,245,75,255,248,139,255,247,122,255,254,226,255,251,196,255,255,255,255,255,255,255,254,235,255,247,115,255,244,67,255,240,0,255,240,0,255,240,2,255,252,199,255,250,179,255,242,38,255,245,70,255,255,248,255,251,182,255,244,83,255,248,135,255,240,0,255,250,161,255,255,255,255,255,255,255,243,40,255,247,108,255,240,0,255,249,156,255,254,232,255,241,30,255,245,90,255,241,27,255,253,218,255,246,104,255,249,160,255,255,245,255,255,255,255,250,168,255,254,234,255,255,255,255,253,222,255,247,127,255,247,118,255,241,15,255,241,19,255,253,207,255,240,0,255,253,218,255,255,255,255,244,77,255,240,0,255,250,175,255,255,255,255,255,255,255,247,126,255,243,58,255,243,51,255,243,39,255,255,255,255,254,230,255,252,200,255,243,45,255,255,255,255,242,37,255,255,255,255,250,173,255,255,255,255,255,255,255,250,158,255,240,0,255,241,31,255,248,145,255,255,255,255,240,0,255,254,239,255,255,255,255,242,31,255,242,30,255,240,0,255,243,47,255,251,187,255,255,255,255,251,203,255,240,0,255,255,255,255,255,253,255,240,0,255,245,92,255,245,94,255,255,255,255,240,0,255,242,35,255,247,118,255,254,240,255,248,126,255,248,134,255,255,255,255,255,255,255,255,255,255,244,69,255,240,0,255,250,157,255,244,62,255,255,246,255,242,41,255,255,255,255,247,126,255,241,3,255,240,0,255,249,143,255,255,255,255,251,186,255,251,188,255,251,184,255,245,89,255,243,52,255,240,0,255,240,5,255,255,255,255,255,255,255,248,131,255,255,255,255,254,238,255,241,19,255,249,154,255,240,0,255,254,227,255,240,12,255,243,62,255,254,240,255,254,243,255,244,65,255,240,3,255,252,206,255,240,0,255,252,207,255,240,0,255,255,255,255,252,198,255,241,18,255,252,202,255,255,255,255,253,231,255,240,7,255,249,149,255,255,255,255,255,255,255,240,0,255,241,26,255,248,142,255,246,100,255,253,223,255,253,224,255,255,255,255,249,145,255,244,70,255,241,3,255,255,255,255,254,243,255,255,255,255,255,255,255,255,255,255,248,138,255,242,30,255,252,210,255,255,255,255,255,255,255,249,158,255,241,16,255,240,0,255,251,173,255,255,255,255,255,255,255,243,46,255,255,255,255,250,174,255,240,0,255,248,136,255,255,255,255,255,255,255,255,255,255,247,117,255,246,102,255,240,0,255,246,102,255,244,78,255,254,251,255,255,255,255,255,255,255,242,47,255,240,0,255,255,255,255,240,0,255,254,235,255,255,255,255,250,166,255,255,255,255,252,206,255,241,26,255,251,184,255,241,16,255,254,236,255,255,245,255,252,197,255,242,40,255,255,255,255,246,93,255,243,54,255,240,0,255,245,81,255,248,146,255,242,28,255,255,255,255,247,112,255,241,22,255,240,0,255,244,61,255,251,198,255,255,255,255,249,160,255,254,232,255,255,255,255,247,111,255,240,0,255,244,67,255,247,133,255,251,196,255,255,255,255,253,222,255,255,255,255,241,11,255,255,255,255,249,158,255,245,85,255,240,0,255,255,253,255,255,255,255,255,247,255,250,164,255,250,169,255,243,46,255,240,0,255,243,52,255,250,172,255,255,255,255,250,174,255,240,0,255,240,0,255,254,247,255,243,63,255,246,100,255,255,255,255,247,126,255,240,0,255,253,225,255,249,154,255,255,255,255,246,95,255,240,0,255,247,124,255,241,15,255,248,123,255,254,242,255,251,187,255,241,11,255,251,188,255,255,255,255,255,255,255,250,167,255,249,146,255,245,85,255,241,1,255,254,238,255,249,149,255,246,98,255,242,28,255,255,255,255,251,190,255,240,0,255,248,132,255,255,255,255,253,221,255,240,0,255,251,183,255,241,20,255,252,197,255,250,161,255,255,255,255,242,27,255,247,122,255,254,241,255,250,160,255,255,255,255,249,149,255,248,136,255,241,11,255,255,255,255,248,141,255,247,115,255,240,0,255,250,166,255,255,255,255,246,101,255,240,0,255,242,39,255,255,255,255,253,225,255,250,163,255,245,82,255,240,0,255,242,42,255,247,123,255,253,218,255,244,69,255,240,0,255,242,31,255,248,134,255,255,255,255,250,173,255,252,217,255,255,255,255,255,255,255,248,135,255,240,0,255,248,136,255,251,193,255,255,255,255,250,172,255,255,255,255,248,136,255,240,0,255,254,243,255,255,255,255,251,183,255,247,120,255,240,0,255,242,28,255,241,15,255,249,140,255,255,255,255,241,14,0,0,0,255,246,105,255,255,255,255,250,175,255,243,53,255,240,0,255,251,186,255,255,255,255,240,0,255,248,138,255,251,199,255,255,255,255,255,255,255,253,214,255,251,182,255,247,111,255,249,148,255,244,65,255,241,10,255,250,168,255,240,7,255,246,101,255,250,171,255,255,255,0,0,0,255,247,119,255,241,33,255,248,145,255,253,220,255,255,255,255,255,255,255,250,183,255,249,156,255,246,101,255,244,79,255,240,11,255,255,255,255,255,255,255,246,110,255,240,0,255,243,47,255,254,243,255,255,255,255,240,0,255,247,129,255,240,7,255,245,80,255,251,185,255,255,254,255,250,170,255,245,81,255,255,255,255,250,169,255,252,192,255,245,87,255,240,0,255,253,217,255,255,255,255,252,210,255,247,109,255,241,22,255,248,139,255,246,107,255,253,228,255,248,144,255,246,101,255,240,11,255,245,81,255,249,148,255,253,217,255,255,255,255,248,140,255,249,145,255,255,255,255,250,165,255,240,0,255,251,198,255,255,255,255,253,217,255,245,81,255,245,93,255,240,2,255,240,0,255,242,37,255,249,148,255,255,255,255,250,178,255,249,151,255,240,0,255,241,16,255,255,255,255,255,255,255,248,129,255,255,255,255,250,181,255,241,17,255,240,0,255,240,0,255,244,77,255,255,255,255,248,131,255,248,131,255,247,125,255,240,0,255,247,122,255,255,255,255,240,5,255,253,224,255,240,11,255,254,237,255,251,181,255,255,255,255,244,68,255,240,0,255,249,152,255,255,255,255,250,170,255,246,95,255,242,42,255,240,0,255,247,110,255,245,83,255,240,0,255,245,86,255,251,196,255,255,255,255,247,108,255,255,255,255,255,255,255,253,223,255,244,61,255,241,15,255,247,117,255,240,0,255,240,0,255,244,66,255,255,255,255,250,171,255,244,74,255,255,255,255,240,0,255,240,0,255,240,0,255,248,133,255,253,216,255,255,255,255,255,255,255,255,248,255,240,9,255,248,138,255,255,255,255,249,153,255,255,255,255,255,243,255,249,160,255,245,79,255,241,11,255,247,128,255,249,165,255,253,232,255,253,232,255,255,255,255,255,255,255,252,220,255,242,32,255,245,77,255,255,255,255,247,133,255,240,0,255,245,96,255,241,13,255,252,203,255,255,255,255,255,255,255,249,157,255,240,3,255,240,0,255,247,117,255,240,0,255,252,199,255,255,255,255,240,0,255,252,200,255,244,73,255,240,0,255,242,45,255,251,196,255,255,255,255,249,147,255,243,49,255,240,0,255,243,49,255,251,200,255,255,255,255,240,0,255,244,66,255,249,153,255,249,159,255,254,226,255,254,238,255,255,255,255,253,214,255,240,0,255,252,214,255,255,255,255,250,168,255,255,255,255,246,110,255,241,22,255,253,215,255,251,183,255,255,255,255,251,187,255,244,62,255,242,34,255,243,46,255,254,234,255,255,255,255,255,255,255,253,225,255,248,122,255,244,74,255,240,0,255,240,0,255,241,28,255,242,32,255,254,249,255,255,255,255,249,155,255,255,255,255,240,0,255,243,44,255,254,239,255,244,77,255,245,75,255,240,0,255,249,152,255,251,182,255,249,150,255,241,3,255,241,4,255,240,0,255,241,15,255,248,142,255,248,144,255,255,255,255,255,255,255,255,255,255,255,252,255,240,0,255,246,97,255,245,95,255,255,255,255,252,200,255,245,86,255,248,128,255,240,0,255,252,206,255,255,255,255,255,253,255,248,148,255,248,142,255,242,22,255,243,37,255,240,0,255,240,0};
  int red, green, blue;
  for(int i = 0; i < (MAX_LED_NUM); i++) {
      red = clay[i*3];
      green = clay[i*3+1];
      blue = clay[i*3+2];
      leds[i] = CRGB(red, blue, green);
  } 

//  int heart[38] = {32,68,74,75,76,77,53,40,41,39,38,36,37,4,5,8,6,3,7,266,265,262,267,264,229,231,263,232,230,233,228,245,202,201,200,197,198,224};
//  for(int index = 0; index <= 37; index++) {
//    for(int i = firstLED[heart[index]]; i <= lastLED[heart[index]]; i++) {
//      leds[i] = CRGB(255, 0, 0);
//    }
//  }
  transition = false;
}

// Picks randome color gradient to white
void colorToWhite(bool *wing, int centre, bool change) {
  
  changeCentre(centre);
  int hue;
  if(change) {
    hue = rand() % 250;
    for(int i = 0; i < NUM_CRYSTALS; i++) {
      if(wing == NULL || wing[i]) {
        crystalHSV(i, hue,
                  (1 - (dist[i] / (double)maxDistance)) * 255, // Saturation
                  255);//150); // Brightness
      } else {
        // Turns off other crystals
        crystalHSV(i, 0, 0, 0);
      }
    }
  }
}

void colorToBlack(bool *wing, int centre, bool change) {
  
  changeCentre(centre);
  int hue;
  if(change) {
    hue = rand() % 250;
    for(int i = 0; i < NUM_CRYSTALS; i++) {
      if(wing == NULL || wing[i]) {
        crystalHSV(i, hue,
                  255, // Saturation
                  (1 - (dist[i] / (double)maxDistance)) * 255);//150); // Brightness
      } else {
        // Turns off other crystals
        crystalHSV(i, 0, 0, 0);
      }
    }
  }
}

void solid(bool *wing, int centre, bool change) {
  changeCentre(centre);
  int hue;
  if(change) {
    hue = rand() % 250;
    for(int i = 0; i < NUM_CRYSTALS; i++) {
      if(wing == NULL || wing[i]) {
        crystalHSV(i, hue,
                  255, // Saturation
                  255); // Brightness
      } else {
        // Turns off other crystals
        crystalHSV(i, 0, 0, 0);
      }
    }
  }
}

// Shimmer pattern
// @arg wing: pass in wing array to light up that wing, or pass in NULL to light up whole wall
// @arg centre: crystal ID for gradient centre
void shimmerCenter(bool *wing, int centre) {
  // remove next line when sensors are implemented, timer is used to fading pattern
  // if sensor detected, timer ++(cap at 255), else timer --(cap at 0)
  int timer = 255;

  changeCentre(centre);
  
  // Constants
  double minSaturation = 0.8;
  double Brightness = 0.5;

  // Pattern algorithm
  for(int i = 0; i < NUM_CRYSTALS; i++) {
    if(wing == NULL || wing[i]) {
      double hue = ((float)dist[i]/50)*255 + t*5;
      if(hue >= 255) hue = hue - 255;
      crystalHSV(i, hue, ((float)(rand()%21)/100+minSaturation)*255, 255);//255-((float)dist[i]/maxDistance)*((float)timer)*Brightness);
    } else {
      // Turns off other crystals
      crystalHSV(i, 0, 0, 0);
    }
  }
}

// ============ WALL PATTERNS ============ WALL PATTERNS ============ WALL PATTERNS ============ WALL PATTERNS ============ WALL PATTERNS ============
// Random color wall synced with radialTO();
void randomWall() {
  if(t % maxDistance == 1) {
    for(int i = 0; i < NUM_CRYSTALS; i++) {
      crystalHSV(i, rand() % 255,  rand() % 100 + 155, rand() % 100 + 155); 
    }
  }
}

// Randomly changes the colors of random cells
void randomDynamic() {
  //every random period of time between 3-10 seconds
  //add a crystal to the array
  if((t % 70) / 10 == dynRndTime) {
    dynRndTime = rand() % 4 + 3;
    for(int i = rand() % 10; i > 0; i--) {
      dynRndArray.insert(dynRndArray.begin(), rand() % 291);
    }
    for(int i = dynRndArray.size()/3; i > 0; i--) {
      dynRndArray.erase(dynRndArray.begin() + (rand() % dynRndArray.size()));
    }
  }
  
  // all the crystal in the arryalist increment hue by random ammount between 1-20
  for (unsigned i = 0; i < dynRndArray.size(); i++) {
    uint8_t red = leds[firstLED[dynRndArray.at(i)]+1].red;
    uint8_t green = leds[firstLED[dynRndArray.at(i)]+1].green;
    uint8_t blue = leds[firstLED[dynRndArray.at(i)]+1].blue;
    uint8_t h,s,v;
    rgb2hsv(red, green, blue,h,s,v);
    crystalHSV(dynRndArray.at(i),  h++, s, v);
  }
}

// Saturation gradient in individual crystals
void crystalGradient() {
  int saturationValue[] = {255,234,255,197,0,255,255,168,255,128,0,255,255,190,255,190,255,187,255,128,255,183,0,255,255,128,255,235,255,129,255,242,255,215,0,255,255,159,255,128,255,201,0,255,255,210,255,172,255,146,255,128,255,179,255,165,255,128,255,167,255,223,0,255,255,177,0,255,0,255,255,235,255,153,255,132,255,181,255,128,255,128,255,158,0,255,255,210,255,161,0,255,255,128,255,128,255,128,255,189,255,232,0,255,0,255,255,249,255,130,255,193,0,255,255,201,0,255,255,248,255,205,255,164,255,131,255,189,255,207,255,241,255,241,0,255,0,255,255,234,255,140,255,162,0,255,255,190,255,128,255,170,255,131,255,225,0,255,0,255,255,202,255,128,255,128,255,181,255,128,255,221,0,255,255,128,255,225,255,160,255,128,255,147,255,221,0,255,255,197,255,149,255,128,255,149,255,225,0,255,255,128,255,157,255,201,255,203,255,239,255,245,0,255,255,231,255,128,255,230,0,255,255,207,0,255,255,177,255,135,255,233,255,215,0,255,255,217,255,154,255,142,255,146,255,241,0,255,0,255,255,237,255,184,255,160,255,128,255,128,255,136,255,137,255,247,0,255,255,197,0,255,255,128,255,143,255,243,255,160,255,160,255,128,255,197,255,213,255,199,255,128,255,128,255,128,255,132,255,195,255,195,0,255,0,255,0,255,255,249,255,128,255,167,255,167,0,255,255,223,255,165,255,187,255,128,255,226,0,255,255,251,255,199,255,195,255,136,255,144,255,128,255,128,255,128,255,177,255,190,0,255,255,241,255,134,255,158,255,249,255,249,255,161,0,255,255,222,255,133,255,221,255,249,255,189,255,189,255,135,0,255,255,223,255,193,255,128,0,255,255,238,255,128,255,219,255,137,255,208,255,227,0,255,255,141,255,177,255,202,255,247,255,128,255,170,255,211,0,255,255,201,255,249,255,188,255,141,255,207,0,255,255,203,255,195,255,133,0,255,255,185,255,198,255,128,255,211,0,255,255,178,255,128,255,147,0,255,255,241,255,209,255,168,255,128,255,149,255,189,255,237,255,161,255,128,255,144,255,195,0,255,255,215,255,236,0,255,0,255,255,197,255,128,255,197,255,224,0,255,255,213,0,255,255,197,255,128,255,249,0,255,255,219,255,186,255,128,255,142,255,135,255,197,0,255,255,135,255,180,0,255,255,216,255,154,255,128,255,221,0,255,255,128,255,197,255,227,0,255,0,255,255,235,255,219,255,183,255,203,255,160,255,132,255,213,255,130,255,178,255,213,0,255,255,187,255,144,255,201,255,238,0,255,0,255,255,219,255,205,255,167,255,178,255,133,0,255,0,255,255,182,255,128,255,151,255,249,0,255,255,128,255,194,255,131,255,168,255,221,255,255,255,213,255,168,0,255,255,212,255,223,255,171,255,128,255,237,0,255,255,233,255,182,255,138,255,197,255,181,255,242,255,199,255,178,255,133,255,168,255,202,255,236,0,255,255,197,255,201,0,255,255,211,255,128,255,227,0,255,255,236,255,169,255,174,255,128,255,128,255,146,255,201,0,255,255,217,255,203,255,128,255,135,255,128,255,173,0,255,255,174,255,205,255,128,255,138,255,247,255,193,0,255,255,188,255,247,255,145,255,128,255,191,255,195,0,255,0,255,255,162,0,255,255,207,255,251,255,148,255,158,255,128,255,129,255,128,255,190,255,199,0,255,0,255,255,221,255,223,255,219,255,172,255,154,255,128,255,131,0,255,0,255,255,231,255,129,255,128,255,235,255,128,0,255,255,227,255,137,255,229,0,255,255,243,255,132,255,202,0,255,0,255,255,128,255,140,255,199,255,177,255,239,255,239,0,255,255,201,255,162,255,130,0,255,255,249,0,255,0,255,0,255,255,197,255,144,255,233,0,255,0,255,255,207,255,135,255,128,255,215,0,255,0,255,255,150,0,255,255,215,255,128,255,195,0,255,0,255,0,255,255,187,255,178,255,128,255,179,255,167,255,253,0,255,0,255,255,151,255,128,0,255,255,128,255,245,0,255,255,211,0,255,255,231,255,140,255,219,255,136,255,245,255,250,255,229,255,153,0,255,255,177,255,155,255,128,255,168,255,201,255,141,0,255,255,184,255,139,255,128,255,159,255,227,0,255,255,207,255,243,0,255,255,184,255,128,255,162,255,193,255,225,0,255,255,239,0,255,255,135,0,255,255,207,255,170,255,128,0,255,255,252,255,209,0,255,255,212,255,150,255,128,255,154,255,215,0,255,255,215,255,128,255,128,255,251,255,159,255,251,255,175,255,171,255,246,0,255,255,128,255,225,255,141,0,255,255,155,0,255,255,143,255,128,255,135,255,161,255,205,255,253,255,214,255,182,255,128,255,166,255,239,255,161,255,195,0,255,255,128,255,130,255,201,255,149,255,177,255,223,255,253,255,180,0,255,0,255,255,254,255,217,255,130,255,128,255,139,0,255,255,207,255,170,255,144,255,128,0,255,255,235,255,174,255,128,255,188,255,249,0,255,0,255,255,214,255,128,255,134,255,128,255,233,0,255,0,255,255,202,255,236,255,199,255,148,255,129,255,173,255,219,255,249,255,174,255,129,255,219,255,255,255,199,255,136,255,154,0,255,255,227,255,225,255,184,255,163,255,194,255,128,255,175,255,237,255,156,255,245,255,184,255,145,255,128,255,189,255,128,255,131,255,186,255,128,255,128,255,217,0,255,255,143,255,217,255,143,255,128,255,217,0,255,0,255,255,190,0,255,255,225,255,164,255,131,255,166,255,211,255,243,0,255,0,255,255,231,255,171,255,128,255,129,255,141,255,221,255,233,255,159,255,128,255,183,0,255,255,182,255,128,255,234,0,255,255,135,255,128,255,128,255,191,255,180,255,250,255,247,255,252,0,255,255,235,255,148,255,180,255,146,255,239,0,255,255,210,255,242,255,130,0,255,25};
  transition = false;
  for(int i = 0; i < (MAX_LED_NUM); i++) {
      double hue = ((float)dist[i]/50)*255 + t*5;
      if(hue >= 255) hue = hue - 255;
      leds[i].setHSV(hue, saturationValue[i*2], saturationValue[i*2+1]);
  }
}
// ============ HELPER FUNCTIONS ============ HELPER FUNCTIONS ============ HELPER FUNCTIONS ============ HELPER FUNCTIONS ============ HELPER FUNCTIONS ============

void crystalRGB(int index, int r, int g, int b) {
  target[index] = CRGB(r, b, g);
}

void crystalHSV(int index, int h, int s, int v) {
//  target[index] = CHSV(h, s, v);
  target[index] = CRGB(0, 0, 0).setHSV(h, s, v);
}

// recalculate distance array if center changes
void changeCentre(int centre) {
  if(centre != oldCentre) {
    oldCentre = centre;
    if(dist != NULL) delete[] dist;
    dist = g->calcDist(centre);
    maxDistance = g->maxDist(dist);
  }
}

uint32_t freeRAM(){ // for Teensy 3.5
    uint32_t stackTop;
    uint32_t heapTop;

    // current position of the stack.
    stackTop = (uint32_t) &stackTop;

    // current position of heap.
    void* hTop = malloc(1);
    heapTop = (uint32_t) hTop;
    free(hTop);

    // The difference is the free, available ram.
    return stackTop - heapTop;
}
