#ifdef __cplusplus
extern "C" {
#endif
int _isatty (){
    return 0;
}

int _fstat (){
    return 1;
}
#ifdef __cplusplus
}
#endif
#include "malloc.h"

#include "FastLED.h"
#include "config.h"
#include "Graph.hpp"

#define NUM_PINS 1
// ALL THESE ARE FOR THE TOP ETHERNET JACK
#define DATA_PIN0 2 // Green wire
#define DATA_PIN1 4 // Blue wire
#define DATA_PIN2 6 // Green wire
#define DATA_PIN3 8 // Brown wire

#define CLOCK_PIN 13

#define LED_TYPE WS2812
#define BRIGHTNESS 255

#define CRYSTALS_PER_PIN 17 // Total crystal designs
#define LEDS_PER_PIN 50 // Number of LEDs per strip

CRGB leds[LEDS_PER_PIN * NUM_PINS];

// USE THESE FOR THE FINAL SOFTWARE
uint16_t firstLED[291] = {0,5,10,13,16,21,27,33,40,45,48,54,58,67,71,75,79,85,88,94,100,107,111,115,122,129,133,138,144,152,158,165,172,176,182,186,190,194,198,202,206,211,215,219,223,228,236,245,250,254,260,263,267,271,275,282,287,292,298,304,307,313,318,325,333,338,345,352,356,362,367,372,377,383,389,392,395,398,402,407,414,420,429,432,434,439,447,451,455,459,462,465,469,473,482,488,491,495,504,510,515,521,529,533,536,542,550,555,562,566,572,578,585,590,595,602,607,610,615,622,630,633,637,641,647,654,658,666,675,681,688,692,696,699,706,713,716,724,730,734,740,743,746,752,755,761,765,776,787,797,807,810,816,824,829,836,840,846,852,859,864,869,876,881,884,889,896,904,907,911,915,921,928,932,940,949,955,962,966,970,973,980,987,990,998,1004,1008,1014,1017,1020,1026,1029,1033,1038,1043,1048,1054,1060,1063,1069,1075,1078,1081,1085,1090,1097,1103,1112,1115,1117,1122,1130,1134,1138,1142,1145,1148,1152,1156,1165,1171,1174,1178,1187,1193,1197,1202,1206,1210,1215,1220,1224,1228,1232,1236,1240,1244,1249,1257,1266,1271,1275,1281,1284,1288,1292,1296,1303,1308,1313,1319,1325,1328,1334,1339,1346,1354,1359,1366,1373,1382,1387,1390,1393,1397,1403,1409,1416,1421,1424,1430,1434,1443,1447,1451,1455,1461,1464,1470,1476,1483,1487,1491,1498,1505,1509,1514,1520,1528,1534,1541};
uint16_t lastLED[291] = {4,9,12,15,20,26,32,39,44,47,53,57,66,70,74,78,84,87,93,99,106,110,114,121,128,132,137,143,151,157,164,171,175,181,185,189,193,197,201,205,210,214,218,222,227,235,244,249,253,259,262,266,270,274,281,286,291,297,303,306,312,317,324,332,337,344,351,355,361,366,371,376,382,388,391,394,397,401,406,413,419,428,431,433,438,446,450,454,458,461,464,468,472,481,487,490,494,503,509,514,520,528,532,535,541,549,554,561,565,571,577,584,589,594,601,606,609,614,621,629,632,636,640,646,653,657,665,674,680,687,691,695,698,705,712,715,723,729,733,739,742,745,751,754,760,764,775,786,796,806,809,815,823,828,835,839,845,851,858,863,868,875,880,883,888,895,903,906,910,914,920,927,931,939,948,954,961,965,969,972,979,986,989,997,1003,1007,1013,1016,1019,1025,1028,1032,1037,1042,1047,1053,1059,1062,1068,1074,1077,1080,1084,1089,1096,1102,1111,1114,1116,1121,1129,1133,1137,1141,1144,1147,1151,1155,1164,1170,1173,1177,1186,1192,1196,1201,1205,1209,1214,1219,1223,1227,1231,1235,1239,1243,1248,1256,1265,1270,1274,1280,1283,1287,1291,1295,1302,1307,1312,1318,1324,1327,1333,1338,1345,1353,1358,1365,1372,1381,1386,1389,1392,1396,1402,1408,1415,1420,1423,1429,1433,1442,1446,1450,1454,1460,1463,1469,1475,1482,1486,1490,1497,1504,1508,1513,1519,1527,1533,1540,1547};

Graph * g;
int *dist;

// Time variable
int t = 0;
uint8_t timerL = 0;
uint8_t timerR = 0;
uint8_t timeDelta = 3;

// HSV variables 
// NOTE: uint8_t allows you to have a range 0-255 without having to mod any values (via 8-bit overflow)
uint8_t hue = 0;
uint8_t hueDelta = 1;

void setup() {

//  int16_t edges[291][5] = {{259, 35, 33, 32, -1}, {259, 35, 4, 2, -1}, {261, 3, 1, -1}, {6, 4, 2, -1}, {36, 5, 3, 1, -1}, {37, 10, 8, 4, -1}, {265, 8, 7, 3, -1}, {266, 8, 6, -1}, {9, 7, 6, 5, -1}, {10, 8, -1}, {13, 11, 9, 5, -1}, {43, 37, 12, 10, -1}, {44, 14, 13, 11, -1}, {12, 10, -1}, {45, 12, -1}, {45, 16, -1}, {20, 17, 15, -1}, {18, 16, -1}, {31, 19, 17, -1}, {29, 24, 20, 18, -1}, {46, 21, 19, 16, -1}, {49, 24, 22, 20, -1}, {61, 50, 23, 21, -1}, {62, 26, 24, 22, -1}, {25, 23, 21, 19, -1}, {29, 26, 24, -1}, {63, 27, 25, 23, -1}, {66, 28, 26, -1}, {30, 29, 27, -1}, {30, 28, 25, 19, -1}, {31, 29, 28, -1}, {30, 18, -1}, {224, 68, 67, 0, -1}, {75, 68, 34, 0, -1}, {40, 39, 35, 33, -1}, {36, 34, 1, 0, -1}, {39, 37, 35, 4, -1}, {38, 36, 11, 5, -1}, {43, 41, 39, 37, -1}, {40, 38, 36, 34, -1}, {77, 41, 39, 34, -1}, {53, 42, 40, 38, -1}, {52, 47, 43, 41, -1}, {44, 42, 38, 11, -1}, {47, 45, 43, 12, -1}, {46, 44, 15, 14, -1}, {49, 47, 45, 20, -1}, {48, 46, 44, 42, -1}, {52, 51, 49, 47, -1}, {50, 48, 46, 21, -1}, {55, 51, 49, 22, -1}, {54, 52, 50, 48, -1}, {53, 51, 48, 42, -1}, {77, 54, 52, 41, -1}, {78, 55, 53, 51, -1}, {61, 56, 54, 50, -1}, {78, 60, 57, 55, -1}, {84, 60, 58, 56, -1}, {96, 64, 59, 57, -1}, {62, 60, 58, -1}, {61, 59, 57, 56, -1}, {62, 60, 55, 22, -1}, {63, 61, 59, 23, -1}, {66, 64, 62, 26, -1}, {96, 65, 63, 58, -1}, {97, 66, 64, -1}, {65, 63, 27, -1}, {191, 99, 69, 32, -1}, {74, 69, 33, 32, -1}, {72, 70, 68, 67, -1}, {100, 99, 71, 69, -1}, {113, 112, 72, 70, -1}, {114, 73, 71, 69, -1}, {80, 74, 72, -1}, {75, 73, 68, -1}, {76, 74, 33, -1}, {79, 77, 75, -1}, {76, 53, 40, -1}, {79, 56, 54, -1}, {83, 80, 78, 76, -1}, {81, 79, 73, -1}, {120, 114, 82, 80, -1}, {121, 86, 83, 81, -1}, {84, 82, 79, -1}, {85, 83, 57, -1}, {95, 88, 86, 84, -1}, {122, 87, 85, 82, -1}, {139, 90, 88, 86, -1}, {94, 89, 87, 85, -1}, {93, 91, 90, 88, -1}, {141, 91, 89, 87, -1}, {92, 90, 89, -1}, {93, 91, -1}, {98, 94, 92, 89, -1}, {97, 95, 93, 88, -1}, {96, 94, 85, -1}, {97, 95, 64, 58, -1}, {98, 96, 94, 65, -1}, {97, 93, -1}, {193, 191, 70, 67, -1}, {144, 112, 101, 70, -1}, {144, 100, -1}, {111, -1}, {147, 111, 104, -1}, {109, 105, 103, -1}, {148, 106, 104, -1}, {107, 105, -1}, {127, 108, 106, -1}, {117, 109, 107, -1}, {110, 108, 104, -1}, {116, 113, 111, 109, -1}, {112, 110, 103, 102, -1}, {113, 111, 100, 71, -1}, {114, 112, 110, 71, -1}, {115, 113, 81, 72, -1}, {119, 116, 114, -1}, {117, 115, 110, -1}, {127, 118, 116, 108, -1}, {126, 125, 119, 117, -1}, {123, 120, 118, 115, -1}, {121, 119, 81, -1}, {123, 122, 120, 82, -1}, {139, 123, 121, 86, -1}, {124, 122, 121, 119, -1}, {138, 132, 125, 123, -1}, {131, 126, 124, 118, -1}, {129, 127, 125, 118, -1}, {128, 126, 117, 107, -1}, {129, 127, -1}, {130, 128, 126, -1}, {134, 131, 129, -1}, {132, 130, 125, -1}, {133, 131, 124, -1}, {138, 136, 134, 132, -1}, {135, 133, 130, -1}, {136, 134, -1}, {137, 135, 133, -1}, {143, 140, 138, 136, -1}, {139, 137, 133, 124, -1}, {140, 138, 122, 87, -1}, {141, 139, 137, -1}, {142, 140, 90, -1}, {143, 141, -1}, {142, 137, -1}, {193, 159, 101, 100, -1}, {158, -1}, {150, 149, 147, -1}, {148, 146, 103, -1}, {149, 147, 105, -1}, {152, 148, 146, -1}, {158, 151, 146, -1}, {156, 152, 150, -1}, {153, 151, 149, -1}, {154, 152, -1}, {174, 155, 153, -1}, {164, 156, 154, -1}, {157, 155, 151, -1}, {163, 160, 158, 156, -1}, {159, 157, 150, 145, -1}, {194, 160, 158, 144, -1}, {194, 161, 159, 157, -1}, {206, 195, 162, 160, -1}, {166, 163, 161, -1}, {164, 162, 157, -1}, {174, 165, 163, 155, -1}, {173, 172, 166, 164, -1}, {170, 167, 165, 162, -1}, {206, 168, 166, -1}, {207, 170, 169, 167, -1}, {211, 186, 170, 168, -1}, {171, 169, 168, 166, -1}, {185, 179, 172, 170, -1}, {178, 173, 171, 165, -1}, {176, 174, 172, 165, -1}, {175, 173, 164, 154, -1}, {176, 174, -1}, {177, 175, 173, -1}, {181, 178, 176, -1}, {179, 177, 172, -1}, {180, 178, 171, -1}, {185, 183, 181, 179, -1}, {182, 180, 177, -1}, {183, 181, -1}, {184, 182, 180, -1}, {190, 187, 185, 183, -1}, {186, 184, 180, 171, -1}, {212, 187, 185, 169, -1}, {188, 186, 184, -1}, {215, 189, 187, -1}, {190, 188, -1}, {189, 184, -1}, {224, 192, 99, 67, -1}, {198, 195, 193, 191, -1}, {194, 192, 144, 99, -1}, {195, 193, 160, 159, -1}, {196, 194, 192, 161, -1}, {205, 197, 195, -1}, {200, 198, 196, -1}, {224, 199, 197, 192, -1}, {227, 225, 200, 198, -1}, {201, 199, 197, -1}, {204, 202, 200, -1}, {245, 228, 201, -1}, {248, 246, 204, -1}, {208, 205, 203, 201, -1}, {206, 204, 196, -1}, {207, 205, 167, 161, -1}, {211, 208, 206, 168, -1}, {209, 207, 204, -1}, {249, 210, 208, -1}, {220, 213, 211, 209, -1}, {212, 210, 207, 169, -1}, {215, 213, 211, 186, -1}, {219, 214, 212, 210, -1}, {218, 216, 215, 213, -1}, {216, 214, 212, 188, -1}, {217, 215, 214, -1}, {218, 216, -1}, {223, 219, 217, 214, -1}, {222, 220, 218, 213, -1}, {221, 219, 210, -1}, {256, 250, 222, 220, -1}, {257, 223, 221, 219, -1}, {222, 218, -1}, {225, 198, 191, 32, -1}, {259, 226, 224, 199, -1}, {263, 260, 227, 225, -1}, {230, 228, 226, 199, -1}, {233, 230, 227, 202, -1}, {264, 263, 262, 260, -1}, {263, 232, 228, 227, -1}, {270, 264, 263, 232, -1}, {235, 233, 231, 230, -1}, {245, 234, 232, 228, -1}, {244, 239, 235, 233, -1}, {270, 236, 234, 232, -1}, {271, 239, 237, 235, -1}, {274, 273, 238, 236, -1}, {279, 241, 239, 237, -1}, {240, 238, 236, 234, -1}, {244, 243, 241, 239, -1}, {280, 242, 240, 238, -1}, {281, 247, 243, 241, -1}, {246, 244, 242, 240, -1}, {245, 243, 240, 234, -1}, {246, 244, 233, 202, -1}, {247, 245, 243, 203, -1}, {253, 248, 246, 242, -1}, {252, 249, 247, 203, -1}, {252, 250, 248, 209, -1}, {256, 251, 249, 221, -1}, {254, 252, 250, -1}, {253, 251, 249, 248, -1}, {281, 254, 252, 247, -1}, {282, 255, 253, 251, -1}, {285, 258, 256, 254, -1}, {257, 255, 250, 221, -1}, {258, 256, 222, -1}, {286, 257, 255, -1}, {260, 225, 1, 0, -1}, {261, 259, 229, 226, -1}, {262, 260, 2, -1}, {265, 261, 229, -1}, {231, 230, 229, 226, -1}, {269, 267, 231, 229, -1}, {267, 266, 262, 6, -1}, {267, 265, 7, -1}, {268, 266, 265, 264, -1}, {269, 267, -1}, {272, 270, 268, 264, -1}, {271, 269, 235, 231, -1}, {273, 272, 270, 236, -1}, {271, 269, -1}, {271, 237, -1}, {275, 237, -1}, {279, 276, 274, -1}, {277, 275, -1}, {290, 278, 276, -1}, {288, 283, 279, 277, -1}, {280, 278, 275, 238, -1}, {283, 281, 279, 241, -1}, {282, 280, 253, 242, -1}, {285, 283, 281, 254, -1}, {284, 282, 280, 278, -1}, {288, 285, 283, -1}, {286, 284, 282, 255, -1}, {287, 285, 258, -1}, {289, 288, 286, -1}, {289, 287, 284, 278, -1}, {290, 288, 287, -1}, {289, 277, -1}};

  // Initialises all ports as outputs (0 for output, 1 for input)
  // pins  0  ->  7
  DDRD = 0b00000000;
  // pins  8  -> 13
  DDRB = 0b00000000;
  // pins  14 -> 21
  DDRC = 0b00000000;
  Serial.begin(9600);

  FastLED.addLeds<LED_TYPE, DATA_PIN0, RGB> (leds, 0, LEDS_PER_PIN);
//  FastLED.addLeds<LED_TYPE, DATA_PIN1, RGB> (leds, LEDS_PER_PIN, 40);
  // https://github.com/FastLED/FastLED/wiki/Multiple-Controller-Examples
//   FastLED.addLeds<LED_TYPE, DATA_PIN2, RGB> (leds, 2*LEDS_PER_PIN, LEDS_PER_PIN);

  g = new Graph();
  srand(0);
  FastLED.setBrightness(BRIGHTNESS);
}

void loop() {
  
// Measures execution time
//--------------------------------
  unsigned long duration = micros();
  float total = 0;
//--------------------------------

//  Serial.print(digitalRead(0));
//  Serial.println(digitalRead(17));

  dist = g->calcDist(0);
  
  for(int i = 0; i < NUM_CRYSTALS; i++) {
    if(i%2) {
      leds[i].setHSV(hue, 255, timerL);
    } else {
      leds[i].setHSV(hue, 255, timerR);
    }
  }

  // Sets master brightness depending on timer
//  FastLED.setBrightness(timer);

  // Counts how long the sensors have been active for
  if(!digitalRead(0)) {
    if(timerL != 255) timerL += timeDelta;
  } else {
    if(timerL != 0) timerL -= timeDelta;
  }

  if(!digitalRead(17)) {
    if(timerR != 255) timerR += timeDelta;
  } else {
    if(timerR != 0) timerR -= timeDelta;
  }
  
  t++;
  if(!digitalRead(0) && !digitalRead(17)) hue += hueDelta;
  FastLED.delay(10);
  FastLED.show();

  delete[] dist;


// Measures execution time
//--------------------------------
  duration = micros() - duration;
  total += duration;
  Serial.print("Time per loop: ");
  Serial.print(total);
  Serial.println(" microseconds");
//--------------------------------

// Measures RAM usage
//--------------------------------
  Serial.print("Ram usage: ");
  Serial.print(65536 - freeRAM() + mallinfo().uordblks);
  Serial.println("/65536 bytes");
//--------------------------------
  
//  for(i = 0; i < NUM_CRYSTALS; i++) {
//    int red = rand() % 255, blue = rand() % 255, green = rand() % 255;
//    colourCrystal(i, red, blue, green);
//  }
}

void crystalRGB(int index, int r, int g, int b) {
  for (int i = firstLED[index]; i <= lastLED[index]; i++) leds[i] = CRGB(r, g, b);
}

void crystalHSV(int index, int h, int s, int v) {
  for (int i = firstLED[index]; i <= lastLED[index]; i++) leds[i].setHSV(h, s, v);
}

uint32_t freeRAM(){ // for Teensy 3.0
    uint32_t stackTop;
    uint32_t heapTop;

    // current position of the stack.
    stackTop = (uint32_t) &stackTop;

    // current position of heap.
    void* hTop = malloc(1);
    heapTop = (uint32_t) hTop;
    free(hTop);

    // The difference is the free, available ram.
    return stackTop - heapTop;
}
